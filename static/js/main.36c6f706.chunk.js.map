{"version":3,"sources":["component/PillCheckbox/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["getBackgroundColor","isChecked","isFocused","PillCheckbox","props","useState","setChecked","setFocused","className","style","backgroundColor","Form","Check","id","type","value","label","checked","onChange","onBlur","onFocus","onKeyPress","event","key","ncs","getNcsValues","inputData","ncsChecked","ncs0","ncs1","ncs2","ncs3","ncs4","ncs5","ncs6","ncs7","ncs8","filter","_","index","join","App","formData","setFormData","clickedIndex","setClickedIndex","toastShow","setToastShow","modalShow","setModalShow","isCertReadOnly","setIsCertReadOnly","isSubjectReadOnly","setIsSubjectReadOnly","isDistrictsReadOnly","setIsDistrictsReadOnly","workingTypeElement","useRef","getInputData","document","querySelectorAll","forEach","element","inputValue","hideModal","Container","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Button","variant","onClick","object","data","encodeURIComponent","JSON","stringify","a","createElement","download","click","remove","exportJSON","Alert","show","position","top","right","Modal","onHide","animation","Header","closeButton","Title","Body","Footer","removeIndex","Row","Col","xs","Label","Control","autoComplete","ref","target","readOnly","tabIndex","undefined","placeholder","inline","currentTarget","map","block","workingType","recruitType","districts","recruitLevel","rank","certificates","companyName","departments","headCount","languageScore","link","announcementTimestamp","sequence","subjects","isEither","current","focus","focusOnFirst","setTimeout","localStorage","setItem","length","Table","striped","bordered","hover","data-key","String","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36c6f706.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./pill-checkbox.css\";\r\n\r\ninterface Props {\r\n  id: string\r\n  label: string\r\n}\r\n\r\nconst getBackgroundColor = (isChecked: boolean, isFocused: boolean): string => {\r\n  if (isFocused) {\r\n    return \"#158b9f\";\r\n  }\r\n  if (isChecked) {\r\n    return \"#14a4be\";\r\n  }\r\n  return \"#ffffff\";\r\n}\r\n\r\nconst PillCheckbox = (props: Props) => {\r\n  const [isChecked, setChecked] = useState<boolean>(false);\r\n  const [isFocused, setFocused] = useState<boolean>(false);\r\n\r\n  return (\r\n    <label \r\n      className=\"pill-checkbox\" \r\n      style={{backgroundColor: getBackgroundColor(isChecked, isFocused)}}\r\n    >\r\n      <Form.Check \r\n        id={props.id}\r\n        type=\"checkbox\" \r\n        className=\"position-absolute\" \r\n        value={props.label}\r\n        checked={isChecked}\r\n        onChange={() => setChecked(!isChecked)}\r\n        onBlur={() => setFocused(false)}\r\n        onFocus={() => setFocused(true)}\r\n        onKeyPress={(event: React.KeyboardEvent<HTMLInputElement>) => {\r\n          if (event.key === \"Enter\") {\r\n            setChecked(!isChecked);\r\n          }\r\n        }}\r\n      />\r\n      <span className={`pill-label ${isChecked ? \"checked\" : \"\"} ${isFocused ? \"focused\" : \"\"}`}>{props.label}</span>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default PillCheckbox;","import React, { useRef, useState } from 'react';\r\nimport { Alert, Button, Col, Container, Form, Modal, Nav, Navbar, Table } from \"react-bootstrap\";\r\nimport \"./App.css\";\r\nimport PillCheckbox from './component/PillCheckbox';\r\n\r\ninterface InputData {\r\n  workingType: string\r\n  recruitType: string\r\n  districts: string\r\n  recruitLevel: string\r\n  rank: string\r\n  certificates: string\r\n  companyName: string\r\n  departments: string\r\n  headCount: string\r\n  languageScore: string\r\n  link: string\r\n  ncs0: boolean\r\n  ncs1: boolean\r\n  ncs2: boolean \r\n  ncs3: boolean \r\n  ncs4: boolean \r\n  ncs5: boolean \r\n  ncs6: boolean \r\n  ncs7: boolean \r\n  ncs8: boolean \r\n  announcementTimestamp: string\r\n  position: string\r\n  sequence: string\r\n  subjects: string\r\n  isEither: boolean\r\n}\r\n\r\ninterface FormData {\r\n  workingType: string\r\n  recruitType: string\r\n  districts: string\r\n  recruitLevel: string\r\n  rank: string\r\n  certificates: string\r\n  companyName: string\r\n  departments: string\r\n  headCount: string\r\n  languageScore: string\r\n  link: string\r\n  ncs: string\r\n  announcementTimestamp: string\r\n  position: string\r\n  sequence: string\r\n  subjects: string\r\n  isEither: boolean\r\n}\r\n\r\nconst ncs = [\r\n  \"의사소통능력\",\r\n  \"문제해결능력\",\r\n  \"대인관계능력\",\r\n  \"자원관리능력\",\r\n  \"직업윤리\",\r\n  \"정보능력\",\r\n  \"수리능력\",\r\n  \"직무수행능력\",\r\n  \"전공능력\",\r\n];\r\n\r\nconst SEPARATOR = \",\";\r\n\r\nconst getNcsValues = (inputData: InputData): string => {\r\n  const ncsChecked = [\r\n    inputData.ncs0,\r\n    inputData.ncs1,\r\n    inputData.ncs2,\r\n    inputData.ncs3,\r\n    inputData.ncs4,\r\n    inputData.ncs5,\r\n    inputData.ncs6,\r\n    inputData.ncs7,\r\n    inputData.ncs8,\r\n  ];\r\n  return ncs.filter((_, index) => ncsChecked[index]).join(SEPARATOR);\r\n};\r\n\r\nconst convertInputDataToFormData = (inputData: InputData): FormData => { \r\n  return {\r\n    workingType: inputData.workingType,\r\n    recruitType: inputData.recruitType,\r\n    districts: inputData.districts,\r\n    recruitLevel: inputData.recruitLevel,\r\n    rank: inputData.rank,\r\n    certificates: inputData.certificates,\r\n    companyName: inputData.companyName,\r\n    departments: inputData.departments, \r\n    headCount: inputData.headCount,\r\n    languageScore: inputData.languageScore,\r\n    link: inputData.link,\r\n    ncs: getNcsValues(inputData),\r\n    announcementTimestamp: inputData.announcementTimestamp,\r\n    position: inputData.position,\r\n    sequence: inputData.sequence,\r\n    subjects: inputData.subjects,\r\n    isEither: inputData.isEither\r\n  };\r\n};\r\n\r\nconst exportJSON = (object: any): void => {\r\n  var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(object));\r\n  \r\n  let a = document.createElement(\"a\");\r\n  a.href = \"data:\" + data;\r\n  a.download = \"data.json\";\r\n\r\n  a.click();\r\n  a.remove();\r\n};\r\n\r\nconst saveJSON = (object: any): void => {\r\n  localStorage.setItem(\"gongdb-input\", JSON.stringify(object));\r\n};\r\n\r\nfunction App() {\r\n  const [formData, setFormData] = useState<FormData[]>([]);\r\n  const [clickedIndex, setClickedIndex] = useState<number>();\r\n  const [toastShow, setToastShow] = useState<boolean>(false);\r\n  const [modalShow, setModalShow] = useState<boolean>(false);\r\n  const [isCertReadOnly, setIsCertReadOnly] = useState<boolean>(true);\r\n  const [isSubjectReadOnly, setIsSubjectReadOnly] = useState<boolean>(true);\r\n  const [isDistrictsReadOnly, setIsDistrictsReadOnly] = useState<boolean>(true);\r\n\r\n  const workingTypeElement = useRef<HTMLInputElement>(null);\r\n\r\n  const clearForm = (): void => {\r\n    document.querySelectorAll(\".erasable\").forEach((element) => {\r\n      (element as HTMLInputElement).value = \"\";\r\n    });\r\n\r\n    document.querySelectorAll(\".form-check-input\").forEach((element) => {\r\n      const isChecked = (element as HTMLInputElement).checked;\r\n      if (isChecked) {\r\n        (element as HTMLInputElement).click();\r\n      }\r\n    });\r\n  };\r\n\r\n  const focusOnFirst = (): void => {\r\n    workingTypeElement?.current?.focus();\r\n  };\r\n\r\n  const getInputData = (): InputData => {\r\n    let value = {};\r\n\r\n    document.querySelectorAll(\".form-control\").forEach((element) => {\r\n      const inputValue = (element as HTMLInputElement).value;\r\n      value = {...value, [element.id]: inputValue};\r\n    })\r\n    \r\n    document.querySelectorAll(\".form-check-input\").forEach((element) => {\r\n      const isChecked = (element as HTMLInputElement).checked;\r\n      value = {...value, [element.id]: isChecked};\r\n    })\r\n\r\n    return value as InputData;\r\n  };\r\n\r\n  const toastAlert = (): void => {\r\n    setToastShow(true);\r\n    setTimeout(() => {\r\n      setToastShow(false);\r\n    }, 1000);\r\n  };\r\n  \r\n  const setReadOnly = (): void => {\r\n    setIsCertReadOnly(true);\r\n    setIsSubjectReadOnly(true);\r\n    setIsDistrictsReadOnly(true);\r\n  };\r\n\r\n  const handleInputClick = (): void => {\r\n    const data = [...formData, convertInputDataToFormData(getInputData())];\r\n    setFormData(data);\r\n    clearForm();\r\n    focusOnFirst();\r\n    toastAlert();\r\n    setReadOnly();\r\n    saveJSON(data);\r\n  };\r\n\r\n  const removeFormData = (removeIndex: number): void => {\r\n    hideModal();\r\n    setFormData(formData.filter((_, index) => index !== removeIndex));\r\n  };\r\n\r\n  const hideModal = () => setModalShow(false);\r\n  const showModal = () => setModalShow(true);\r\n\r\n  return (\r\n    <Container>\r\n      <Navbar bg=\"light\" expand=\"lg\">\r\n        <Navbar.Brand href=\"#\">공디비</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"#\">Form</Nav.Link>\r\n          </Nav>\r\n          <Button \r\n            variant=\"outline-info\" \r\n            onClick={() => exportJSON(formData)}\r\n          >\r\n            데이터 다운로드\r\n          </Button>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <Alert\r\n        variant=\"success\"\r\n        show={toastShow} \r\n        style={{position: \"fixed\", top: 15, right: 15}}\r\n      >\r\n        정상적으로 입력되었습니다!\r\n      </Alert>\r\n\r\n      <Modal show={modalShow} onHide={hideModal} animation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>데이터 삭제</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>{(clickedIndex as number)+1}번 데이터를 삭제하시겠습니까</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"light\" onClick={hideModal}>취소</Button>\r\n          <Button variant=\"danger\" onClick={() => removeFormData(clickedIndex as number)}>삭제</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Form>\r\n        <Form.Row id=\"input-form\">\r\n          <Col xs={12}>\r\n            <Form.Label>회사명</Form.Label>\r\n            <Form.Control id=\"companyName\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={6}>\r\n            <Form.Label>접수일자</Form.Label>\r\n            <Form.Control id=\"announcementTimestamp\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={6}>\r\n            <Form.Label>차수</Form.Label>\r\n            <Form.Control id=\"sequence\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>링크</Form.Label>\r\n            <Form.Control id=\"link\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>지원가능 어학성적</Form.Label>\r\n            <Form.Control id=\"languageScore\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={12} className=\"mt-3\">\r\n            <hr />\r\n          </Col>\r\n          <Col xs={6}>\r\n            <Form.Label>근무형태</Form.Label>\r\n            <Form.Control id=\"workingType\" className=\"erasable\" autoComplete=\"off\" ref={workingTypeElement} />\r\n          </Col>\r\n          <Col xs={6}>\r\n            <Form.Label>채용구분</Form.Label>\r\n            <Form.Control \r\n              id=\"recruitType\" \r\n              className=\"erasable\" \r\n              autoComplete=\"off\"\r\n              onChange={(event) => event.target.value === \"지역\" ? setIsDistrictsReadOnly(false) : setIsDistrictsReadOnly(true)}\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>지역</Form.Label>\r\n            <Form.Control \r\n              id=\"districts\" \r\n              className=\"erasable\" \r\n              autoComplete=\"off\"\r\n              readOnly={isDistrictsReadOnly}\r\n              tabIndex={isDistrictsReadOnly ? -1 : undefined}\r\n              placeholder={isDistrictsReadOnly ? \"채용구분이 지역일 때 입력\" : undefined}\r\n            />\r\n          </Col>\r\n          <Col xs={6}>\r\n            <Form.Label>채용수준</Form.Label>\r\n            <Form.Control id=\"recruitLevel\" className=\"erasable\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={6}>\r\n            <Form.Label>직급</Form.Label>\r\n            <Form.Control \r\n              id=\"rank\" className=\"erasable\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>직군</Form.Label>\r\n            <Form.Control id=\"position\" className=\"erasable\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>채용인원</Form.Label>\r\n            <Form.Control id=\"headCount\" className=\"erasable\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>과목</Form.Label>\r\n            <Form.Control id=\"subjects\" className=\"erasable\" autoComplete=\"off\" />\r\n          </Col>\r\n          <Col xs={12} className=\"mt-3\">\r\n            <hr />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>지원가능 자격증</Form.Label>\r\n            <Form.Control \r\n              id=\"certificates\" \r\n              className=\"erasable\" \r\n              autoComplete=\"off\" \r\n              readOnly={isCertReadOnly}\r\n              tabIndex={isCertReadOnly ? -1 : undefined}\r\n              placeholder={isCertReadOnly ? \"활성화하려면 클릭\" : undefined}\r\n              onClick={() => setIsCertReadOnly(!isCertReadOnly)}\r\n            />\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Form.Label>지원가능 학과</Form.Label>\r\n            <Form.Control \r\n              id=\"departments\" \r\n              className=\"erasable\" \r\n              autoComplete=\"off\" \r\n              readOnly={isSubjectReadOnly}\r\n              tabIndex={isSubjectReadOnly ? -1 : undefined}\r\n              placeholder={isSubjectReadOnly ? \"활성화하려면 클릭\" : undefined}\r\n              onClick={() => setIsSubjectReadOnly(!isSubjectReadOnly)}\r\n            />\r\n          </Col>\r\n          {\r\n            !isCertReadOnly && !isSubjectReadOnly\r\n            ? <Col xs={12} className=\"mt-3 text-right\">\r\n                <Form.Check \r\n                  inline \r\n                  type=\"checkbox\" \r\n                  id=\"isEither\"\r\n                  label=\"둘 중 하나만 만족하면 돼요\" \r\n                  onKeyPress={(event: React.KeyboardEvent<HTMLInputElement>) => {\r\n                    if (event.key === \"Enter\") {\r\n                      event.currentTarget.checked = !event.currentTarget.checked\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            : null\r\n          }\r\n          <Col xs={12} className=\"my-4 text-center\">\r\n            {\r\n              ncs.map((value, index) => (\r\n                <PillCheckbox \r\n                  key={index}\r\n                  id={`ncs${index}`}\r\n                  label={value}\r\n                />\r\n              ))\r\n            }\r\n          </Col>\r\n          <Col xs={12}>\r\n            <Button \r\n              block\r\n              variant=\"info\" \r\n              onClick={handleInputClick}\r\n            >\r\n              입력\r\n            </Button>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n      {\r\n        formData.length > 0\r\n        ? <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>#</th>\r\n                <th>회사명</th>\r\n                <th>공고연도</th>\r\n                <th>차수</th>\r\n                <th>어학</th>\r\n                <th>링크</th>\r\n                <th>직군</th>\r\n                <th>근무형태</th>\r\n                <th>채용구분</th>\r\n                <th>지역</th>\r\n                <th>채용수준</th>\r\n                <th>직급</th>\r\n                <th>인원</th>\r\n                <th>과목</th>\r\n                <th>자격증</th>\r\n                <th>학과</th>\r\n                <th>NCS</th>\r\n                <th>둘중하나</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {\r\n                formData.map((value, index) => (\r\n                  <tr \r\n                    key={index} \r\n                    data-key={index} \r\n                    onClick={() => {\r\n                      setClickedIndex(index);\r\n                      showModal();\r\n                    }}\r\n                  >\r\n                    <td>{index+1}</td>\r\n                    <td>{value.companyName}</td>\r\n                    <td>{value.announcementTimestamp}</td>\r\n                    <td>{value.sequence}</td>\r\n                    <td>{value.languageScore}</td>\r\n                    <td>{value.link}</td>\r\n                    <td>{value.position}</td>\r\n                    <td>{value.workingType}</td>\r\n                    <td>{value.recruitType}</td>\r\n                    <td>{value.districts}</td>\r\n                    <td>{value.recruitLevel}</td>\r\n                    <td>{value.rank}</td>\r\n                    <td>{value.headCount}</td>\r\n                    <td>{value.subjects}</td>\r\n                    <td>{value.certificates}</td>\r\n                    <td>{value.departments}</td>\r\n                    <td>{value.ncs}</td>\r\n                    <td>{typeof value.isEither === \"boolean\" ? String(value.isEither) : \"\"}</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n            </tbody>\r\n          </Table>\r\n        : null\r\n      }\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}