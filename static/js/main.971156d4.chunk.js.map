{"version":3,"sources":["component/PillCheckbox/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["getBackgroundColor","isChecked","isFocused","PillCheckbox","props","useState","setChecked","setFocused","className","style","backgroundColor","Form","Check","id","type","value","label","checked","onChange","onBlur","onFocus","onKeyPress","event","key","ncs","getNcsValues","inputData","ncsChecked","ncs0","ncs1","ncs2","ncs3","ncs4","ncs5","ncs6","ncs7","ncs8","filter","_","index","join","App","formData","setFormData","clickedIndex","setClickedIndex","toastShow","setToastShow","modalShow","setModalShow","isCertReadOnly","setIsCertReadOnly","isSubjectReadOnly","setIsSubjectReadOnly","positionElement","useRef","getInputData","document","querySelectorAll","forEach","element","inputValue","hideModal","Container","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Button","variant","onClick","object","data","encodeURIComponent","JSON","stringify","a","createElement","download","click","remove","exportJSON","Alert","show","position","top","right","Modal","onHide","animation","Header","closeButton","Title","Body","Footer","removeIndex","Row","Col","xs","Label","Control","autoComplete","ref","readOnly","tabIndex","undefined","map","block","certificates","companyName","departments","headCount","languageScore","link","noticeYear","sequence","subjects","current","focus","focusOnFirst","setTimeout","length","Table","striped","bordered","hover","data-key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.971156d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Form } from \"react-bootstrap\";\r\nimport \"./pill-checkbox.css\";\r\n\r\ninterface Props {\r\n  id: string\r\n  label: string\r\n}\r\n\r\nconst getBackgroundColor = (isChecked: boolean, isFocused: boolean): string => {\r\n  if (isFocused) {\r\n    return \"#158b9f\";\r\n  }\r\n  if (isChecked) {\r\n    return \"#14a4be\";\r\n  }\r\n  return \"#ffffff\";\r\n}\r\n\r\nconst PillCheckbox = (props: Props) => {\r\n  const [isChecked, setChecked] = useState<boolean>(false);\r\n  const [isFocused, setFocused] = useState<boolean>(false);\r\n\r\n  return (\r\n    <label \r\n      className=\"pill-checkbox\" \r\n      style={{backgroundColor: getBackgroundColor(isChecked, isFocused)}}\r\n    >\r\n      <Form.Check \r\n        id={props.id}\r\n        type=\"checkbox\" \r\n        className=\"position-absolute\" \r\n        value={props.label}\r\n        checked={isChecked}\r\n        onChange={() => setChecked(!isChecked)}\r\n        onBlur={() => setFocused(false)}\r\n        onFocus={() => setFocused(true)}\r\n        onKeyPress={(event: React.KeyboardEvent<HTMLInputElement>) => {\r\n          if (event.key === \"Enter\") {\r\n            setChecked(!isChecked);\r\n          }\r\n        }}\r\n      />\r\n      <span className={`pill-label ${isChecked ? \"checked\" : \"\"} ${isFocused ? \"focused\" : \"\"}`}>{props.label}</span>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default PillCheckbox;","import React, { useRef, useState } from 'react';\nimport { Alert, Button, Col, Container, Form, Modal, Nav, Navbar, Table } from \"react-bootstrap\";\nimport \"./App.css\";\nimport PillCheckbox from './component/PillCheckbox';\n\ninterface InputData {\n  certificates: string\n  companyName: string\n  departments: string\n  headCount: string\n  languageScore: string\n  link: string\n  ncs0: boolean\n  ncs1: boolean\n  ncs2: boolean \n  ncs3: boolean \n  ncs4: boolean \n  ncs5: boolean \n  ncs6: boolean \n  ncs7: boolean \n  ncs8: boolean \n  noticeYear: string\n  position: string\n  sequence: string\n  subjects: string\n}\n\ninterface FormData {\n  certificates: string\n  companyName: string\n  departments: string\n  headCount: string\n  languageScore: string\n  link: string\n  ncs: string\n  noticeYear: string\n  position: string\n  sequence: string\n  subjects: string\n}\n\nconst ncs = [\n  \"의사소통능력\",\n  \"문제해결능력\",\n  \"대인관계능력\",\n  \"자원관리능력\",\n  \"직업윤리\",\n  \"정보능력\",\n  \"수리능력\",\n  \"직무수행능력\",\n  \"전공능력\",\n];\n\nconst SEPARATOR = \",\";\n\nconst getNcsValues = (inputData: InputData): string => {\n  const ncsChecked = [\n    inputData.ncs0,\n    inputData.ncs1,\n    inputData.ncs2,\n    inputData.ncs3,\n    inputData.ncs4,\n    inputData.ncs5,\n    inputData.ncs6,\n    inputData.ncs7,\n    inputData.ncs8,\n  ];\n  return ncs.filter((_, index) => ncsChecked[index]).join(SEPARATOR);\n};\n\nconst convertInputDataToFormData = (inputData: InputData): FormData => { \n  return {\n    certificates: inputData.certificates,\n    companyName: inputData.companyName,\n    departments: inputData.departments, \n    headCount: inputData.headCount,\n    languageScore: inputData.languageScore,\n    link: inputData.link,\n    ncs: getNcsValues(inputData),\n    noticeYear: inputData.noticeYear,\n    position: inputData.position,\n    sequence: inputData.sequence,\n    subjects: inputData.subjects\n  };\n};\n\nconst exportJSON = (object: any) => {\n  var data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(object));\n  \n  let a = document.createElement(\"a\");\n  a.href = \"data:\" + data;\n  a.download = \"data.json\";\n\n  a.click();\n  a.remove();\n};\n\nfunction App() {\n  const [formData, setFormData] = useState<FormData[]>([]);\n  const [clickedIndex, setClickedIndex] = useState<number>();\n  const [toastShow, setToastShow] = useState<boolean>(false);\n  const [modalShow, setModalShow] = useState<boolean>(false);\n  const [isCertReadOnly, setIsCertReadOnly] = useState<boolean>(true);\n  const [isSubjectReadOnly, setIsSubjectReadOnly] = useState<boolean>(true);\n\n  const positionElement = useRef<HTMLInputElement>(null);\n\n  const clearForm = (): void => {\n    document.querySelectorAll(\".erasable\").forEach((element) => {\n      (element as HTMLInputElement).value = \"\";\n    });\n\n    document.querySelectorAll(\".form-check-input\").forEach((element) => {\n      const isChecked = (element as HTMLInputElement).checked;\n      if (isChecked) {\n        (element as HTMLInputElement).click();\n      }\n    });\n  };\n\n  const focusOnFirst = (): void => {\n    positionElement?.current?.focus();\n  };\n\n  const getInputData = (): InputData => {\n    let value = {};\n\n    document.querySelectorAll(\".form-control\").forEach((element) => {\n      const inputValue = (element as HTMLInputElement).value;\n      value = {...value, [element.id]: inputValue};\n    })\n    \n    document.querySelectorAll(\".form-check-input\").forEach((element) => {\n      const isChecked = (element as HTMLInputElement).checked;\n      value = {...value, [element.id]: isChecked};\n    })\n\n    return value as InputData;\n  };\n\n  const toastAlert = (): void => {\n    setToastShow(true);\n    setTimeout(() => {\n      setToastShow(false);\n    }, 1000);\n  };\n\n  const handleInputClick = (): void => {\n    setFormData([...formData, convertInputDataToFormData(getInputData())]);\n    clearForm();\n    focusOnFirst();\n    toastAlert();\n  };\n\n  const removeFormData = (removeIndex: number): void => {\n    hideModal();\n    setFormData(formData.filter((_, index) => index !== removeIndex));\n  };\n\n  const hideModal = () => setModalShow(false);\n  const showModal = () => setModalShow(true);\n\n  return (\n    <Container>\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/gongdb-input\">공디비</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/gongdb-input\">Form</Nav.Link>\n          </Nav>\n          <Button \n            variant=\"outline-info\" \n            onClick={() => exportJSON(formData)}\n          >\n            다운로드\n          </Button>\n        </Navbar.Collapse>\n      </Navbar>\n\n      <Alert\n        variant=\"success\"\n        show={toastShow} \n        style={{position: \"fixed\", top: 15, right: 15}}\n      >\n        정상적으로 입력되었습니다!\n      </Alert>\n\n      <Modal show={modalShow} onHide={hideModal} animation={false}>\n        <Modal.Header closeButton>\n          <Modal.Title>데이터 삭제</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{(clickedIndex as number)+1}번 데이터를 삭제하시겠습니까</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"light\" onClick={hideModal}>취소</Button>\n          <Button variant=\"danger\" onClick={() => removeFormData(clickedIndex as number)}>삭제</Button>\n        </Modal.Footer>\n      </Modal>\n\n      <Form>\n        <Form.Row id=\"input-form\">\n          <Col xs={12}>\n            <Form.Label>회사명</Form.Label>\n            <Form.Control id=\"companyName\" autoComplete=\"off\" />\n          </Col>\n          <Col xs={6}>\n            <Form.Label>공고연도</Form.Label>\n            <Form.Control id=\"noticeYear\" autoComplete=\"off\" />\n          </Col>\n          <Col xs={6}>\n            <Form.Label>차수</Form.Label>\n            <Form.Control id=\"sequence\" autoComplete=\"off\" />\n          </Col>\n          <Col xs={12}>\n            <Form.Label>링크</Form.Label>\n            <Form.Control id=\"link\" autoComplete=\"off\" />\n          </Col>\n          <Col xs={12}>\n            <Form.Label>지원가능 어학성적</Form.Label>\n            <Form.Control id=\"languageScore\" autoComplete=\"off\" />\n          </Col>\n          <Col xs={12} className=\"mt-3\">\n            <hr />\n          </Col>\n          <Col xs={12}>\n            <Form.Label>직군</Form.Label>\n            <Form.Control id=\"position\" className=\"erasable\" autoComplete=\"off\" ref={positionElement} />\n          </Col>\n          <Col xs={12}>\n            <Form.Label>채용인원</Form.Label>\n            <Form.Control id=\"headCount\" className=\"erasable\" autoComplete=\"off\" />\n          </Col>\n          <Col xs={12}>\n            <Form.Label>과목</Form.Label>\n            <Form.Control id=\"subjects\" className=\"erasable\" autoComplete=\"off\" />\n          </Col>\n          <Col xs={12} className=\"mt-3\">\n            <hr />\n          </Col>\n          <Col xs={12}>\n            <Form.Label>지원가능 자격증</Form.Label>\n            <Form.Control \n              id=\"certificates\" \n              className=\"erasable\" \n              autoComplete=\"off\" \n              readOnly={isCertReadOnly}\n              tabIndex={isCertReadOnly ? -1 : undefined}\n              onClick={() => setIsCertReadOnly(!isCertReadOnly)}\n            />\n          </Col>\n          <Col xs={12}>\n            <Form.Label>지원가능 학과</Form.Label>\n            <Form.Control \n              id=\"departments\" \n              className=\"erasable\" \n              autoComplete=\"off\" \n              readOnly={isSubjectReadOnly}\n              tabIndex={isSubjectReadOnly ? -1 : undefined}\n              onClick={() => setIsSubjectReadOnly(!isSubjectReadOnly)}\n            />\n          </Col>\n          <Col xs={12} className=\"my-4 text-center\">\n            {\n              ncs.map((value, index) => (\n                <PillCheckbox \n                  key={index}\n                  id={`ncs${index}`}\n                  label={value}\n                />\n              ))\n            }\n          </Col>\n          <Col xs={12}>\n            <Button \n              block\n              variant=\"info\" \n              onClick={handleInputClick}\n            >\n              입력\n            </Button>\n          </Col>\n        </Form.Row>\n      </Form>\n      {\n        formData.length > 0\n        ? <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>회사명</th>\n                <th>공고연도</th>\n                <th>차수</th>\n                <th>어학</th>\n                <th>링크</th>\n                <th>직군</th>\n                <th>인원</th>\n                <th>과목</th>\n                <th>자격증</th>\n                <th>학과</th>\n                <th>NCS</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                formData.map((value, index) => (\n                  <tr \n                    key={index} \n                    data-key={index} \n                    onClick={() => {\n                      setClickedIndex(index);\n                      showModal();\n                    }}\n                  >\n                    <td>{index+1}</td>\n                    <td>{value.companyName}</td>\n                    <td>{value.noticeYear}</td>\n                    <td>{value.sequence}</td>\n                    <td>{value.languageScore}</td>\n                    <td>{value.link}</td>\n                    <td>{value.position}</td>\n                    <td>{value.headCount}</td>\n                    <td>{value.subjects}</td>\n                    <td>{value.certificates}</td>\n                    <td>{value.departments}</td>\n                    <td>{value.ncs}</td>\n                  </tr>\n                ))\n              }\n            </tbody>\n          </Table>\n        : null\n      }\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}